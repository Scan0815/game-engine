/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IScene } from "./interfaces/Scene";
import { Scene } from "./classes/Scene";
import { HeroGameObject } from "./gameObjects/HeroGameObject";
import { TLayer } from "./interfaces/TileMapLayer";
export { IScene } from "./interfaces/Scene";
export { Scene } from "./classes/Scene";
export { HeroGameObject } from "./gameObjects/HeroGameObject";
export { TLayer } from "./interfaces/TileMapLayer";
export namespace Components {
    interface AppRoot {
    }
    interface HudDiamondCount {
        "scene": IScene;
    }
    interface HudLevelCompleteMessage {
    }
    interface RenderElevatedSprite {
        "tileSetX": number;
        "tileSetY": number;
        "yTranslate": number;
    }
    interface RenderGameObjectLayer {
        "image": CanvasImageSource;
        "scene": Scene;
        "startScene": (scene?: any) => Promise<void>;
    }
    interface RenderHero {
        "tileSetX": number;
        "tileSetY": number;
        "yTranslate": number;
    }
    interface RenderLayer {
        "image": CanvasImageSource;
        "layer": TLayer;
        "scene": IScene;
    }
    interface RenderScene {
    }
    interface RenderSprite {
        "cellSize": number;
        "tileSetX": number;
        "tileSetY": number;
    }
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLHudDiamondCountElement extends Components.HudDiamondCount, HTMLStencilElement {
    }
    var HTMLHudDiamondCountElement: {
        prototype: HTMLHudDiamondCountElement;
        new (): HTMLHudDiamondCountElement;
    };
    interface HTMLHudLevelCompleteMessageElement extends Components.HudLevelCompleteMessage, HTMLStencilElement {
    }
    var HTMLHudLevelCompleteMessageElement: {
        prototype: HTMLHudLevelCompleteMessageElement;
        new (): HTMLHudLevelCompleteMessageElement;
    };
    interface HTMLRenderElevatedSpriteElement extends Components.RenderElevatedSprite, HTMLStencilElement {
    }
    var HTMLRenderElevatedSpriteElement: {
        prototype: HTMLRenderElevatedSpriteElement;
        new (): HTMLRenderElevatedSpriteElement;
    };
    interface HTMLRenderGameObjectLayerElement extends Components.RenderGameObjectLayer, HTMLStencilElement {
    }
    var HTMLRenderGameObjectLayerElement: {
        prototype: HTMLRenderGameObjectLayerElement;
        new (): HTMLRenderGameObjectLayerElement;
    };
    interface HTMLRenderHeroElement extends Components.RenderHero, HTMLStencilElement {
    }
    var HTMLRenderHeroElement: {
        prototype: HTMLRenderHeroElement;
        new (): HTMLRenderHeroElement;
    };
    interface HTMLRenderLayerElement extends Components.RenderLayer, HTMLStencilElement {
    }
    var HTMLRenderLayerElement: {
        prototype: HTMLRenderLayerElement;
        new (): HTMLRenderLayerElement;
    };
    interface HTMLRenderSceneElement extends Components.RenderScene, HTMLStencilElement {
    }
    var HTMLRenderSceneElement: {
        prototype: HTMLRenderSceneElement;
        new (): HTMLRenderSceneElement;
    };
    interface HTMLRenderSpriteElement extends Components.RenderSprite, HTMLStencilElement {
    }
    var HTMLRenderSpriteElement: {
        prototype: HTMLRenderSpriteElement;
        new (): HTMLRenderSpriteElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "hud-diamond-count": HTMLHudDiamondCountElement;
        "hud-level-complete-message": HTMLHudLevelCompleteMessageElement;
        "render-elevated-sprite": HTMLRenderElevatedSpriteElement;
        "render-game-object-layer": HTMLRenderGameObjectLayerElement;
        "render-hero": HTMLRenderHeroElement;
        "render-layer": HTMLRenderLayerElement;
        "render-scene": HTMLRenderSceneElement;
        "render-sprite": HTMLRenderSpriteElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface HudDiamondCount {
        "scene"?: IScene;
    }
    interface HudLevelCompleteMessage {
    }
    interface RenderElevatedSprite {
        "tileSetX"?: number;
        "tileSetY"?: number;
        "yTranslate"?: number;
    }
    interface RenderGameObjectLayer {
        "image"?: CanvasImageSource;
        "scene"?: Scene;
    }
    interface RenderHero {
        "tileSetX"?: number;
        "tileSetY"?: number;
        "yTranslate"?: number;
    }
    interface RenderLayer {
        "image"?: CanvasImageSource;
        "layer"?: TLayer;
        "scene"?: IScene;
    }
    interface RenderScene {
    }
    interface RenderSprite {
        "cellSize"?: number;
        "tileSetX"?: number;
        "tileSetY"?: number;
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "hud-diamond-count": HudDiamondCount;
        "hud-level-complete-message": HudLevelCompleteMessage;
        "render-elevated-sprite": RenderElevatedSprite;
        "render-game-object-layer": RenderGameObjectLayer;
        "render-hero": RenderHero;
        "render-layer": RenderLayer;
        "render-scene": RenderScene;
        "render-sprite": RenderSprite;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "hud-diamond-count": LocalJSX.HudDiamondCount & JSXBase.HTMLAttributes<HTMLHudDiamondCountElement>;
            "hud-level-complete-message": LocalJSX.HudLevelCompleteMessage & JSXBase.HTMLAttributes<HTMLHudLevelCompleteMessageElement>;
            "render-elevated-sprite": LocalJSX.RenderElevatedSprite & JSXBase.HTMLAttributes<HTMLRenderElevatedSpriteElement>;
            "render-game-object-layer": LocalJSX.RenderGameObjectLayer & JSXBase.HTMLAttributes<HTMLRenderGameObjectLayerElement>;
            "render-hero": LocalJSX.RenderHero & JSXBase.HTMLAttributes<HTMLRenderHeroElement>;
            "render-layer": LocalJSX.RenderLayer & JSXBase.HTMLAttributes<HTMLRenderLayerElement>;
            "render-scene": LocalJSX.RenderScene & JSXBase.HTMLAttributes<HTMLRenderSceneElement>;
            "render-sprite": LocalJSX.RenderSprite & JSXBase.HTMLAttributes<HTMLRenderSpriteElement>;
        }
    }
}
